import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axios from "axios";
import { API_ENDPOINTS } from "../../config";
import toast from "react-hot-toast";
import dayjs from 'dayjs';

const SPECIALTIES = [
  "N·ªôi khoa",
  "Ngo·∫°i khoa",
  "S·∫£n - Nhi",
  "Da li·ªÖu - Th·∫©m m·ªπ",
  "T√¢m l√Ω - T√¢m th·∫ßn",
  "Ph·ª•c h·ªìi ch·ª©c nƒÉng",
  "Y h·ªçc c·ªï truy·ªÅn",
];

const STATUS_OPTIONS = ["pending", "confirmed", "cancelled", "completed", "to-payment"];

export default function ReceptionistAppointmentDetail() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [appointment, setAppointment] = useState(null);
  const [loading, setLoading] = useState(true);

  const [newDate, setNewDate] = useState("");
  const [newStartTime, setNewStartTime] = useState("");
  const [newEndTime, setNewEndTime] = useState("");
  const [newStatus, setNewStatus] = useState("");

  const [availableDoctors, setAvailableDoctors] = useState([]);
  const [availableRooms, setAvailableRooms] = useState([]);
  const [suggestedSlots, setSuggestedSlots] = useState([]);
  const [selectedSpeciality, setSelectedSpeciality] = useState("");
  const [selectedDoctorId, setSelectedDoctorId] = useState("");
  const [selectedRoomId, setSelectedRoomId] = useState("");
  const [fetchingAvailability, setFetchingAvailability] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);

  const a = appointment;

  const calculateEndTime = (startTime) => {
    if (!startTime) return "";
    const now = dayjs();
    const [hours, minutes] = startTime.split(':').map(Number);

    const startDateTime = now.hour(hours).minute(minutes).second(0);
    const endDateTime = startDateTime.add(1, 'hour');

    return endDateTime.format('HH:mm');
  };

  const handleStartTimeChange = (e) => {
    const startValue = e.target.value;
    setNewStartTime(startValue);
    setNewEndTime(calculateEndTime(startValue));
  };

  const fetchDetail = async () => {
    setLoading(true);
    try {
      const res = await axios.get(`${API_ENDPOINTS.APPOINTMENT_BY_ID(id)}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });
      const data = res.data;
      console.log(data);
      setAppointment(data);

      // Kh·ªüi t·∫°o gi√° tr·ªã cho c√°c input m·ªõi
      setNewDate(new Date(data.date).toISOString().split('T')[0]); // YYYY-MM-DD

      const dbStartTime = data.startTime.substring(0, 5);
      setNewStartTime(dbStartTime);
      setNewEndTime(calculateEndTime(dbStartTime)); // T√≠nh l·∫°i cho slot 1 gi·ªù

      setNewStatus(data.status);

      setSelectedDoctorId(data.doctorId || "");
      setSelectedRoomId(data.roomId || "");

      if (data.Employee?.speciality) {
        setSelectedSpeciality(data.Employee.speciality);
      } else {
        setSelectedSpeciality("");
      }

    } catch (err) {
      console.error("Failed to fetch appointment details:", err);
      toast.error("L·ªói khi t·∫£i chi ti·∫øt l·ªãch h·∫πn.");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDetail();
  }, [id]);


  const fetchAvailability = async () => {
    if (!newDate || !newStartTime || !newEndTime) return;

    setFetchingAvailability(true);

    const date = newDate;
    const startTime = newStartTime + ":00";
    const endTime = newEndTime + ":00";

    const specialityToSearch = selectedSpeciality;

    try {
      const doctorRes = await axios.get(API_ENDPOINTS.GET_AVAILABLE_DOCTORS, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        params: { date, startTime, endTime, speciality: specialityToSearch },
      });

      setAvailableDoctors(doctorRes.data.availableDoctors || []);
      setSuggestedSlots(doctorRes.data.suggestedSlots || []);

      const roomRes = await axios.get(API_ENDPOINTS.GET_AVAILABLE_ROOMS, {
        headers: { Authorization: `Bearer ${localStorage.getItem("token")}` },
        params: { date, startTime, endTime },
      });
      setAvailableRooms(roomRes.data);

      // Logic th√¥ng b√°o
      if (doctorRes.data.availableDoctors?.length === 0 && doctorRes.data.suggestedSlots?.length > 0) {
        toast(`Kh√¥ng c√≥ b√°c sƒ© kh·∫£ d·ª•ng trong ${selectedSpeciality || 'chuy√™n khoa n√†y'} v√†o khung gi·ªù ${newStartTime}-${newEndTime}. ƒê√£ t√¨m th·∫•y ${doctorRes.data.suggestedSlots.length} g·ª£i √Ω.`, { icon: 'üí°' });
      } else if (doctorRes.data.availableDoctors?.length === 0 && doctorRes.data.suggestedSlots?.length === 0) {
        toast.error("Kh√¥ng t√¨m th·∫•y b√°c sƒ© kh·∫£ d·ª•ng n√†o.");
      } else if (doctorRes.data.availableDoctors?.length > 0) {
        toast.success(`ƒê√£ t·∫£i danh s√°ch b√°c sƒ© kh·∫£ d·ª•ng (${doctorRes.data.availableDoctors.length} ng∆∞·ªùi) cho khung gi·ªù n√†y.`);
      }
    } catch (err) {
      console.error("Failed to fetch availability:", err);
      toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh·∫£ d·ª•ng.");
    } finally {
      setFetchingAvailability(false);
    }
  };

  useEffect(() => {
    if (!loading && newDate && newStartTime) {
      fetchAvailability();
    }
  }, [selectedSpeciality, newDate, newStartTime, loading]);


  const handleUpdate = async () => {
    if (!selectedDoctorId || !selectedRoomId || !newDate || !newStartTime || !newEndTime || !newStatus) {
      toast.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß Ng√†y, Th·ªùi gian, B√°c sƒ©, Ph√≤ng v√† Tr·∫°ng th√°i.");
      return;
    }

    if ((newStatus === 'confirmed' || newStatus === 'pending') && availableDoctors.findIndex(d => d.id === selectedDoctorId) === -1) {
      toast.error("B√°c sƒ© ƒë∆∞·ª£c ch·ªçn KH√îNG kh·∫£ d·ª•ng v√†o khung gi·ªù n√†y. Vui l√≤ng ch·ªçn b√°c sƒ© kh√°c ho·∫∑c khung gi·ªù kh√°c.");
      return;
    }

    setIsUpdating(true);
    try {
      const payload = {
        date: newDate,
        startTime: newStartTime + ":00",
        endTime: newEndTime + ":00",
        status: newStatus,
        doctorId: selectedDoctorId,
        roomId: selectedRoomId,
      };

      await axios.put(API_ENDPOINTS.UPDATE_APPOINTMENT(id), payload, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        },
      });

      toast.success("C·∫≠p nh·∫≠t l·ªãch kh√°m th√†nh c√¥ng!");
      fetchDetail();

    } catch (err) {
      if (err.response && err.response.status === 409) {
        toast.error(`L·ªói Tr√πng l·ªãch: ${err.response.data.error}`);
      } else {
        console.error("Failed to update appointment:", err);
        toast.error("C·∫≠p nh·∫≠t th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } finally {
      setIsUpdating(false);
    }
  };

  if (loading)
    return (
      <div className="flex justify-center items-center h-64">
        <div className="text-gray-500 text-sm">ƒêang t·∫£i chi ti·∫øt l·ªãch h·∫πn...</div>
      </div>
    );

  if (!appointment)
    return (
      <div className="text-center text-gray-500 p-6">Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn.</div>
    );

  const currentSelectedDoctor = availableDoctors.find(d => d.id === selectedDoctorId) || a.Employee;
  const currentSelectedRoom = availableRooms.find(r => r.id === selectedRoomId) || a.Room;


  return (
    <div className="p-6 bg-white rounded-lg shadow-md">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-semibold text-gray-700">
          Chi ti·∫øt l·ªãch h·∫πn #{a.id}
        </h1>
        <button
          onClick={() => navigate(-1)}
          className="px-4 py-2 text-sm bg-gray-200 hover:bg-gray-300 rounded-md"
        >
          ‚Üê Quay l·∫°i
        </button>
      </div>

      <div className="flex flex-col gap-6">

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="border rounded-lg p-4 bg-gray-50 md:col-span-1">
            <h2 className="text-lg font-semibold mb-3 text-gray-700">Th√¥ng tin B·ªánh nh√¢n</h2>
            <p><strong>T√™n:</strong> {a.Patient?.name || "-"}</p>
            <p><strong>SƒêT:</strong> {a.Patient?.phoneNumber || "-"}</p>
            <p><strong>Email:</strong> {a.Patient?.email || "-"}</p>
            <p><strong>Gi·ªõi t√≠nh:</strong> {a.Patient?.gender || "-"}</p>
            <p><strong>Ng√†y sinh:</strong> {a.Patient?.dateOfBirth
              ? new Date(a.Patient.dateOfBirth).toLocaleDateString("vi-VN")
              : "-"}</p>
          </div>

          <div className="border rounded-lg p-4 bg-gray-50 md:col-span-1">
            <h2 className="text-lg font-semibold mb-3 text-gray-700">L·ªãch h·∫πn Hi·ªán t·∫°i</h2>
            <p><strong>Ng√†y:</strong> {new Date(a.date).toLocaleDateString("vi-VN")}</p>
            <p><strong>Th·ªùi gian:</strong> {a.startTime.substring(0, 5)} - {a.endTime.substring(0, 5)}</p>
            <p><strong>Tr·∫°ng th√°i:</strong> <span className={`font-medium text-${a.status === 'confirmed' ? 'blue' : 'yellow'}-600`}>{a.status}</span></p>
            <hr className="my-3" />
            <p><strong>B√°c sƒ©:</strong> {a.Employee?.name || "-"}</p>
            <p><strong>Ph√≤ng:</strong> {a.Room?.name || "-"}</p>
          </div>
        </div>
        {/* K·∫æT QU·∫¢ KH√ÅM V√Ä D·ªäCH V·ª§ S·ª¨ D·ª§NG (CH·ªà HI·ªÇN TH·ªä KHI C√ì MEDICAL RECORD) */}
        {a.MedicalRecord && (
          <div className="border border-green-500 rounded-lg p-4 bg-green-50 md:col-span-3">
            <h2 className="text-lg font-bold mb-4 text-green-800 flex items-center">
              <span className="mr-2">üìù</span> K·∫øt qu·∫£ Kh√°m & H·ªì s∆° B·ªánh √°n
            </h2>

            {/* TH√îNG TIN CH√çNH */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <p className="font-semibold text-green-700">Tri·ªáu ch·ª©ng:</p>
                <p className="text-gray-700 italic">{a.MedicalRecord.symptoms || "Kh√¥ng c√≥"}</p>
              </div>
              <div>
                <p className="font-semibold text-green-700">Ch·∫©n ƒëo√°n:</p>
                <p className="text-gray-700 italic">{a.MedicalRecord.diagnosis || "Ch∆∞a c√≥ ch·∫©n ƒëo√°n"}</p>
              </div>
              <div className="md:col-span-2">
                <p className="font-semibold text-green-700">K·∫øt lu·∫≠n/L·ªùi khuy√™n:</p>
                <p className="text-gray-700 italic">{a.MedicalRecord.conclusion || "Kh√¥ng c√≥ k·∫øt lu·∫≠n"}</p>
              </div>
              <div className="md:col-span-2">
                <p className="font-semibold text-green-700">Ng√†y kh√°m:</p>
                <p className="text-gray-700 italic">{dayjs(a.MedicalRecord.date).format('DD/MM/YYYY HH:mm')}</p>
              </div>
            </div>

            <hr className="my-4 border-green-300" />

            {/* B·∫¢NG D·ªäCH V·ª§ S·ª¨ D·ª§NG */}
            <h3 className="text-md font-bold mb-3 text-green-800">D·ªãch v·ª• ƒë√£ s·ª≠ d·ª•ng</h3>
            {a.MedicalRecord.servicesUsed && a.MedicalRecord.servicesUsed.length > 0 ? (
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-green-200 border border-green-300">
                  <thead className="bg-green-100">
                    <tr>
                      <th className="px-4 py-2 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                        STT
                      </th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                        T√™n D·ªãch v·ª•
                      </th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                        S·ªë l∆∞·ª£ng
                      </th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                        ƒê∆°n gi√°
                      </th>
                      <th className="px-4 py-2 text-left text-xs font-medium text-green-700 uppercase tracking-wider">
                        T·ªïng ti·ªÅn
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-green-200">
                    {a.MedicalRecord.servicesUsed.map((service, index) => (
                      <tr key={index}>
                        <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                          {index + 1}
                        </td>
                        <td className="px-4 py-2 whitespace-nowrap text-sm font-medium text-gray-900">
                          {service.name || 'N/A'}
                        </td>
                        <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                          {service.quantity || 1}
                        </td>
                        <td className="px-4 py-2 whitespace-nowrap text-sm text-gray-500">
                          {service.price ? new Intl.NumberFormat('vi-VN').format(service.price) + ' VND' : 'N/A'}
                        </td>
                        <td className="px-4 py-2 whitespace-nowrap text-sm font-semibold text-gray-700">
                          {service.price ? new Intl.NumberFormat('vi-VN').format(service.price * (service.quantity || 1)) + ' VND' : 'N/A'}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <p className="text-gray-600 italic text-sm">Kh√¥ng c√≥ d·ªãch v·ª• n√†o ƒë∆∞·ª£c ghi nh·∫≠n trong h·ªì s∆° b·ªánh √°n n√†y.</p>
            )}
          </div>
        )}
        {/* C·∫¨P NH·∫¨T CHUNG */}
        <div className="border border-blue-400 rounded-lg p-4 bg-blue-50 md:col-span-2">
          <h2 className="text-lg font-bold mb-4 text-blue-800">C·∫≠p nh·∫≠t L·ªãch h·∫πn</h2>

          {/* Input fields for Date & Time & Status */}
          <div className="grid grid-cols-3 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Ng√†y:</label>
              <input
                type="date"
                value={newDate}
                onChange={(e) => setNewDate(e.target.value)}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">B·∫Øt ƒë·∫ßu (HH:MM):</label>
              <input
                type="time"
                value={newStartTime}
                onChange={handleStartTimeChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">K·∫øt th√∫c (1 gi·ªù sau):</label>
              <input
                type="time"
                value={newEndTime}
                readOnly
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm bg-gray-200 cursor-not-allowed"
              />
            </div>
          </div>

          {/* Status Dropdown */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">Tr·∫°ng th√°i:</label>
            <select
              value={newStatus}
              onChange={(e) => setNewStatus(e.target.value)}
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
            >
              {STATUS_OPTIONS.map(status => (
                <option key={status} value={status}>{status.toUpperCase()}</option>
              ))}
            </select>
          </div>

          {/* Dropdown CH·ªåN CHUY√äN KHOA */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              L·ªçc B√°c sƒ© theo Chuy√™n khoa:
            </label>
            <select
              value={selectedSpeciality}
              onChange={(e) => setSelectedSpeciality(e.target.value)}
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
              disabled={fetchingAvailability || isUpdating}
            >
              <option value="">-- T·∫•t c·∫£ Chuy√™n khoa --</option>
              {SPECIALTIES.map((sp) => (
                <option key={sp} value={sp}>{sp}</option>
              ))}
            </select>
          </div>

          {/* Select Doctor */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Ch·ªçn B√°c sƒ© Kh·∫£ d·ª•ng:
            </label>
            <div className="flex gap-2 items-center">
              <select
                value={selectedDoctorId}
                onChange={(e) => setSelectedDoctorId(parseInt(e.target.value))}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
                disabled={fetchingAvailability || isUpdating}
              >
                <option value="">-- Ch·ªçn B√°c sƒ© --</option>
                {availableDoctors.map((d) => (
                  <option key={d.id} value={d.id}>
                    {d.name} ({d.speciality || 'Ch∆∞a r√µ'})
                  </option>
                ))}
              </select>
              <button
                onClick={fetchAvailability}
                disabled={fetchingAvailability || isUpdating}
                className={`px-4 py-2 text-sm rounded-md transition-colors ${fetchingAvailability ? 'bg-gray-400' : 'bg-indigo-600 hover:bg-indigo-700 text-white'}`}
              >
                {fetchingAvailability ? 'ƒêang t·∫£i...' : 'T·∫£i l·∫°i DS'}
              </button>
            </div>
            {availableDoctors.length === 0 && !fetchingAvailability && suggestedSlots.length === 0 && (
              <p className="text-red-500 text-xs mt-1">Kh√¥ng t√¨m th·∫•y b√°c sƒ© kh·∫£ d·ª•ng v√†o khung gi·ªù n√†y.</p>
            )}
          </div>

          {/* Select Room */}
          <div className="mb-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">Ch·ªçn Ph√≤ng kh√°m Kh·∫£ d·ª•ng:</label>
            <select
              value={selectedRoomId}
              onChange={(e) => setSelectedRoomId(parseInt(e.target.value))}
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
              disabled={fetchingAvailability || isUpdating}
            >
              <option value="">-- Ch·ªçn Ph√≤ng kh√°m --</option>
              {availableRooms.map((r) => (
                <option key={r.id} value={r.id}>
                  {r.name} ({r.type})
                </option>
              ))}
            </select>
            {availableRooms.length === 0 && !fetchingAvailability && <p className="text-red-500 text-xs mt-1">Kh√¥ng t√¨m th·∫•y ph√≤ng kh·∫£ d·ª•ng n√†o.</p>}
          </div>

          {/* SUGGESTION BLOCK */}
          {availableDoctors.length === 0 && suggestedSlots.length > 0 && (
            <div className="mt-4 p-3 border border-red-300 bg-red-50 rounded-md">
              <h3 className="text-md font-bold text-red-800 mb-2">‚ö† G·ª£i √Ω Th·ªùi gian Kh√°c:</h3>
              <ul className="list-disc list-inside text-sm text-red-700 space-y-1">
                {suggestedSlots.map((slot, index) => (
                  <li key={index}>
                    **{slot.date}** l√∫c **{slot.startTime} - {slot.endTime}**: ({slot.availableDoctorsCount} b√°c sƒ© kh·∫£ d·ª•ng)
                  </li>
                ))}
              </ul>
              <p className="text-red-800 text-xs mt-2 font-semibold">
                **H√†nh ƒë·ªông:** B·∫°n c√≥ th·ªÉ nh·∫≠p Ng√†y v√† Th·ªùi gian g·ª£i √Ω v√†o c√°c √¥ tr√™n ƒë·ªÉ ki·ªÉm tra v√† C·∫≠p nh·∫≠t.
              </p>
            </div>
          )}

          {/* C·∫≠p nh·∫≠t Button */}
          <button
            onClick={handleUpdate}
            disabled={!selectedDoctorId || !selectedRoomId || isUpdating || fetchingAvailability}
            className={`w-full mt-4 px-4 py-2 text-white font-semibold rounded-md transition-colors ${(!selectedDoctorId || !selectedRoomId || isUpdating || fetchingAvailability)
              ? 'bg-gray-400 cursor-not-allowed'
              : 'bg-blue-600 hover:bg-blue-700'
              }`}
          >
            {isUpdating ? 'ƒêang c·∫≠p nh·∫≠t...' : 'L∆∞u Thay ƒê·ªïi (UPDATE)'}
          </button>
        </div>

        {/* Notes */}
        <div className="border rounded-lg p-4 bg-gray-50 md:col-span-3">
          <h2 className="text-lg font-semibold mb-3 text-gray-700">Ghi ch√∫</h2>
          <p>{a.notes || "Kh√¥ng c√≥ ghi ch√∫."}</p>
        </div>
      </div>
    </div>
  );
}
